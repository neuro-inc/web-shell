name: Continuous Integration

on:
  push:
    branches: [master]
    tags: ["v*"]
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]

jobs:
  test:
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    name: Test web-shell image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: neuromation/web-shell
      IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
      CLUSTER_NAME: default
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Setup and configure neuro-cli
        run: |
          python -m pip install -r requirements/python.txt
          neuro config login-with-token ${{ secrets.NEURO_TOKEN }} ${{ secrets.NEURO_STAGING_URL }}
          neuro config switch-cluster ${CLUSTER_NAME}

      - name: Build and push image to the platform
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          neuro image push $IMAGE_NAME:$IMAGE_TAG image:$IMAGE_NAME:$IMAGE_TAG

      - name: Sanity test
        run: |
          IMAGE_NAME=$IMAGE_NAME IMAGE_TAG=$IMAGE_TAG make sanity-test

      - name: Cleanup
        if: ${{ always() }}
        run: |
          neuro image rm -f image:$IMAGE_NAME:$IMAGE_TAG || echo Image does not exist

  release:
    name: Release web-shell image
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    env:
      IMAGE_NAME: ghcr.io/neuro-inc/web-shell
      LEGACY_IMAGE_NAME: neuromation/web-shell
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME .

      - name: Push image
        run: |
          set -x
          for tag in $(echo "latest,pipelines,${GITHUB_REF#refs/tags/}" | tr "," " ")
          do
            docker tag $IMAGE_NAME $IMAGE_NAME:$tag && docker push $IMAGE_NAME:$tag
            docker tag $IMAGE_NAME $LEGACY_IMAGE_NAME:$tag && docker push $LEGACY_IMAGE_NAME:$tag
          done
